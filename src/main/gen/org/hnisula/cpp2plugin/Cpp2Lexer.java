// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Cpp2.flex

package org.hnisula.cpp2plugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.hnisula.cpp2plugin.psi.Cpp2Types;
import com.intellij.psi.TokenType;


class Cpp2Lexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\2\2\22\0\1\1\1\4"+
    "\1\5\2\0\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\6\23"+
    "\1\24\1\23\1\25\1\26\1\27\1\30\1\31\1\0"+
    "\1\32\1\33\1\34\3\33\1\35\5\36\1\37\10\36"+
    "\1\40\2\36\1\41\2\36\1\0\1\42\1\0\1\43"+
    "\1\44\1\0\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\2\36\1\56\1\57\1\60\1\61"+
    "\1\62\1\36\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\36\1\73\1\74\1\75\7\0\1\3"+
    "\32\0\1\76\u01df\0\1\76\177\0\13\76\35\0\2\3"+
    "\5\0\1\76\57\0\1\76\240\0\1\76\377\0\u0100\77";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\3\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\2\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\1\2\23\1\24\1\25"+
    "\14\23\1\2\1\23\1\26\1\27\1\30\1\2\1\31"+
    "\1\32\1\0\1\33\1\0\1\34\1\35\1\36\1\37"+
    "\1\0\1\40\1\41\1\0\1\41\2\15\2\0\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\23\1\51"+
    "\4\23\1\52\1\53\15\23\1\2\1\23\1\54\1\33"+
    "\1\55\5\15\1\0\1\41\5\23\1\56\4\23\1\57"+
    "\14\23\1\60\1\61\3\23\1\62\1\23\1\63\5\23"+
    "\1\64\1\65\1\66\3\23\1\67\1\70\1\23\1\71"+
    "\6\23\1\72\1\23\1\73\5\23\1\74\1\75\1\23"+
    "\1\76\2\23\1\77\1\23\1\100\1\23\1\101\1\23"+
    "\1\102\1\103";

  private static int [] zzUnpackAction() {
    int [] result = new int[178];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\100\0\u0180"+
    "\0\100\0\100\0\100\0\u01c0\0\100\0\u0200\0\u0240\0\u0280"+
    "\0\u02c0\0\u0300\0\u0340\0\100\0\u0380\0\u03c0\0\u0400\0\u0440"+
    "\0\u0480\0\u04c0\0\100\0\u0480\0\u0500\0\u0540\0\u0580\0\u05c0"+
    "\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700\0\u0740\0\u0780\0\u07c0"+
    "\0\u0800\0\u0840\0\100\0\u0880\0\100\0\u08c0\0\100\0\100"+
    "\0\u0140\0\100\0\u0900\0\100\0\100\0\100\0\100\0\u0940"+
    "\0\u0980\0\u09c0\0\u0a00\0\100\0\u0a40\0\u0a80\0\u0ac0\0\u0b00"+
    "\0\100\0\100\0\100\0\100\0\100\0\100\0\u0b40\0\u0b80"+
    "\0\u0480\0\u0bc0\0\u0c00\0\u0c40\0\u0c80\0\u0480\0\u0cc0\0\u0d00"+
    "\0\u0d40\0\u0d80\0\u0dc0\0\u0e00\0\u0e40\0\u0e80\0\u0ec0\0\u0f00"+
    "\0\u0f40\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\u1080\0\100\0\u0140"+
    "\0\100\0\u10c0\0\u1100\0\100\0\u1140\0\u1180\0\u11c0\0\u1200"+
    "\0\u1240\0\u1280\0\u12c0\0\u1300\0\u1340\0\u1380\0\u13c0\0\u1400"+
    "\0\u1440\0\u1480\0\u0480\0\u14c0\0\u1500\0\u1540\0\u1580\0\u15c0"+
    "\0\u1600\0\u1640\0\u1680\0\u16c0\0\u1700\0\u1740\0\u1780\0\u0480"+
    "\0\u0480\0\u17c0\0\u1800\0\u1840\0\u0480\0\u1880\0\u0480\0\u18c0"+
    "\0\u1900\0\u1940\0\u1980\0\u19c0\0\u0480\0\u0480\0\u0480\0\u1a00"+
    "\0\u1a40\0\u1a80\0\u0480\0\u0480\0\u1ac0\0\u0480\0\u1b00\0\u1b40"+
    "\0\u1b80\0\u1bc0\0\u1c00\0\u1c40\0\u0480\0\u1c80\0\u0480\0\u1cc0"+
    "\0\u1d00\0\u1d40\0\u1d80\0\u1dc0\0\u0480\0\u0480\0\u1e00\0\u0480"+
    "\0\u1e40\0\u1e80\0\u0480\0\u1ec0\0\u0480\0\u1f00\0\u0480\0\u1f40"+
    "\0\u0480\0\u0480";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[178];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\3\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\4\31\2\32\1\31\1\2\1\33\1\34\2\31\1\35"+
    "\1\36\1\37\1\40\2\31\1\41\1\31\1\42\1\43"+
    "\1\44\1\45\1\46\1\31\1\47\1\50\1\51\1\52"+
    "\2\31\1\53\1\54\1\55\1\4\1\2\101\0\2\56"+
    "\10\0\1\57\53\0\1\56\23\0\1\57\114\0\1\60"+
    "\47\0\5\61\1\62\34\61\1\63\35\61\7\0\1\64"+
    "\104\0\1\65\101\0\1\66\2\0\1\21\3\22\4\0"+
    "\1\67\65\0\1\70\100\0\1\71\67\0\1\22\6\0"+
    "\1\72\1\0\4\22\7\0\1\73\1\74\1\0\1\75"+
    "\1\76\1\77\4\0\1\73\2\0\1\100\1\74\3\0"+
    "\1\75\3\0\1\100\3\0\1\76\2\0\1\77\16\0"+
    "\1\22\6\0\1\72\1\0\4\22\10\0\1\74\1\0"+
    "\1\75\1\76\10\0\1\100\1\74\3\0\1\75\3\0"+
    "\1\100\3\0\1\76\36\0\1\101\101\0\1\102\1\103"+
    "\77\0\1\104\77\0\1\105\1\106\101\0\7\107\2\0"+
    "\27\107\26\0\4\31\6\0\7\31\2\0\27\31\12\0"+
    "\1\61\13\0\4\31\6\0\7\31\2\0\27\31\26\0"+
    "\4\31\6\0\7\31\2\0\15\31\1\110\11\31\26\0"+
    "\4\31\6\0\7\31\2\0\15\31\1\111\11\31\26\0"+
    "\4\31\6\0\7\31\2\0\12\31\1\112\14\31\26\0"+
    "\4\31\6\0\7\31\2\0\1\31\1\113\7\31\1\114"+
    "\3\31\1\115\11\31\26\0\4\31\6\0\7\31\2\0"+
    "\6\31\1\116\5\31\1\117\12\31\26\0\4\31\6\0"+
    "\7\31\2\0\15\31\1\120\11\31\26\0\4\31\6\0"+
    "\7\31\2\0\1\31\1\121\3\31\1\122\21\31\26\0"+
    "\4\31\6\0\7\31\2\0\22\31\1\123\1\124\3\31"+
    "\26\0\4\31\6\0\7\31\2\0\17\31\1\125\2\31"+
    "\1\126\4\31\26\0\4\31\6\0\7\31\2\0\5\31"+
    "\1\127\21\31\26\0\4\31\6\0\7\31\2\0\10\31"+
    "\1\130\6\31\1\131\6\31\1\132\12\0\1\61\13\0"+
    "\3\31\1\32\6\0\7\31\2\0\20\31\1\133\6\31"+
    "\6\0\2\56\16\0\4\31\6\0\7\31\2\0\11\31"+
    "\1\134\11\31\1\135\3\31\26\0\4\31\6\0\7\31"+
    "\2\0\10\31\1\136\16\31\101\0\1\137\4\0\2\56"+
    "\64\0\1\56\10\0\5\61\1\140\34\61\1\63\35\61"+
    "\17\0\1\141\60\0\2\71\2\0\73\71\11\0\1\72"+
    "\10\0\4\72\10\0\1\74\1\0\1\74\11\0\1\100"+
    "\1\74\3\0\1\74\3\0\1\100\25\0\1\142\10\0"+
    "\2\142\114\0\1\143\1\144\15\0\1\143\7\0\1\144"+
    "\50\0\1\145\16\0\1\145\31\0\1\146\10\0\4\146"+
    "\6\0\3\146\7\0\6\146\43\0\1\147\2\0\4\150"+
    "\74\0\4\107\6\0\7\107\2\0\27\107\26\0\4\31"+
    "\6\0\7\31\2\0\14\31\1\151\1\31\1\152\10\31"+
    "\26\0\4\31\6\0\7\31\2\0\20\31\1\153\6\31"+
    "\26\0\4\31\6\0\7\31\2\0\12\31\1\154\14\31"+
    "\26\0\4\31\6\0\7\31\2\0\14\31\1\155\12\31"+
    "\26\0\4\31\6\0\7\31\2\0\17\31\1\156\7\31"+
    "\26\0\4\31\6\0\7\31\2\0\15\31\1\157\11\31"+
    "\26\0\4\31\6\0\7\31\2\0\23\31\1\160\3\31"+
    "\26\0\4\31\6\0\7\31\2\0\13\31\1\161\13\31"+
    "\26\0\4\31\6\0\7\31\2\0\25\31\1\162\1\31"+
    "\26\0\4\31\6\0\7\31\2\0\21\31\1\163\5\31"+
    "\26\0\4\31\6\0\7\31\2\0\5\31\1\164\21\31"+
    "\26\0\4\31\6\0\7\31\2\0\11\31\1\165\3\31"+
    "\1\166\11\31\26\0\4\31\6\0\7\31\2\0\2\31"+
    "\1\167\24\31\26\0\4\31\6\0\7\31\2\0\21\31"+
    "\1\170\5\31\26\0\4\31\6\0\7\31\2\0\11\31"+
    "\1\171\15\31\26\0\4\31\6\0\7\31\2\0\22\31"+
    "\1\172\4\31\26\0\4\31\6\0\7\31\2\0\16\31"+
    "\1\173\10\31\26\0\4\31\6\0\7\31\2\0\11\31"+
    "\1\174\15\31\26\0\4\31\6\0\7\31\2\0\17\31"+
    "\1\175\7\31\6\0\2\56\16\0\4\31\6\0\7\31"+
    "\2\0\23\31\1\135\3\31\26\0\4\31\6\0\7\31"+
    "\2\0\11\31\1\176\15\31\15\0\1\142\10\0\2\142"+
    "\14\0\1\75\1\76\15\0\1\75\7\0\1\76\51\0"+
    "\1\144\25\0\1\144\50\0\1\144\16\0\1\144\31\0"+
    "\1\146\10\0\4\146\6\0\3\146\1\0\1\75\1\76"+
    "\4\0\6\146\3\0\1\75\7\0\1\76\32\0\4\150"+
    "\74\0\4\150\10\0\1\74\1\0\1\74\12\0\1\74"+
    "\3\0\1\74\42\0\4\31\6\0\7\31\2\0\20\31"+
    "\1\177\6\31\26\0\4\31\6\0\7\31\2\0\26\31"+
    "\1\200\26\0\4\31\6\0\7\31\2\0\5\31\1\201"+
    "\21\31\26\0\4\31\6\0\7\31\2\0\20\31\1\172"+
    "\6\31\26\0\4\31\6\0\7\31\2\0\1\31\1\202"+
    "\25\31\26\0\4\31\6\0\7\31\2\0\24\31\1\203"+
    "\2\31\26\0\4\31\6\0\7\31\2\0\22\31\1\204"+
    "\4\31\26\0\4\31\6\0\7\31\2\0\5\31\1\205"+
    "\21\31\26\0\4\31\6\0\7\31\2\0\5\31\1\206"+
    "\21\31\26\0\4\31\6\0\7\31\2\0\21\31\1\207"+
    "\5\31\26\0\4\31\6\0\7\31\2\0\17\31\1\210"+
    "\7\31\26\0\4\31\6\0\7\31\2\0\23\31\1\211"+
    "\3\31\26\0\4\31\6\0\7\31\2\0\21\31\1\212"+
    "\5\31\26\0\4\31\6\0\7\31\2\0\12\31\1\213"+
    "\14\31\26\0\4\31\6\0\7\31\2\0\22\31\1\214"+
    "\4\31\26\0\4\31\6\0\7\31\2\0\20\31\1\215"+
    "\6\31\26\0\4\31\6\0\7\31\2\0\5\31\1\216"+
    "\21\31\26\0\4\31\6\0\7\31\2\0\5\31\1\217"+
    "\21\31\26\0\4\31\6\0\7\31\2\0\14\31\1\220"+
    "\12\31\26\0\4\31\6\0\7\31\2\0\21\31\1\221"+
    "\5\31\26\0\4\31\6\0\7\31\2\0\12\31\1\222"+
    "\14\31\26\0\4\31\6\0\7\31\2\0\21\31\1\223"+
    "\5\31\26\0\4\31\6\0\7\31\2\0\12\31\1\224"+
    "\14\31\26\0\4\31\6\0\7\31\2\0\1\31\1\225"+
    "\25\31\26\0\4\31\6\0\7\31\2\0\21\31\1\226"+
    "\5\31\26\0\4\31\6\0\7\31\2\0\20\31\1\227"+
    "\6\31\26\0\4\31\6\0\7\31\2\0\17\31\1\230"+
    "\7\31\26\0\4\31\6\0\7\31\2\0\1\31\1\231"+
    "\25\31\26\0\4\31\6\0\7\31\2\0\5\31\1\232"+
    "\21\31\26\0\4\31\6\0\7\31\2\0\11\31\1\233"+
    "\15\31\26\0\4\31\6\0\7\31\2\0\17\31\1\234"+
    "\7\31\26\0\4\31\6\0\7\31\2\0\7\31\1\235"+
    "\17\31\26\0\4\31\6\0\7\31\2\0\22\31\1\236"+
    "\4\31\26\0\4\31\6\0\7\31\2\0\5\31\1\237"+
    "\21\31\26\0\4\31\6\0\7\31\2\0\17\31\1\240"+
    "\7\31\26\0\4\31\6\0\7\31\2\0\16\31\1\241"+
    "\10\31\26\0\4\31\6\0\7\31\2\0\11\31\1\242"+
    "\15\31\26\0\4\31\6\0\7\31\2\0\21\31\1\243"+
    "\5\31\26\0\4\31\6\0\7\31\2\0\3\31\1\244"+
    "\23\31\26\0\4\31\6\0\7\31\2\0\3\31\1\245"+
    "\23\31\26\0\4\31\6\0\7\31\2\0\14\31\1\246"+
    "\12\31\26\0\4\31\6\0\7\31\2\0\1\31\1\247"+
    "\25\31\26\0\4\31\6\0\7\31\2\0\4\31\1\250"+
    "\22\31\26\0\4\31\6\0\7\31\2\0\1\31\1\251"+
    "\25\31\26\0\4\31\6\0\7\31\2\0\4\31\1\252"+
    "\22\31\26\0\4\31\6\0\7\31\2\0\5\31\1\253"+
    "\21\31\26\0\4\31\6\0\7\31\2\0\21\31\1\254"+
    "\5\31\26\0\4\31\6\0\7\31\2\0\12\31\1\255"+
    "\14\31\26\0\4\31\6\0\7\31\2\0\3\31\1\256"+
    "\23\31\26\0\4\31\6\0\7\31\2\0\5\31\1\257"+
    "\21\31\26\0\4\31\6\0\7\31\2\0\5\31\1\260"+
    "\21\31\26\0\4\31\6\0\7\31\2\0\5\31\1\261"+
    "\21\31\26\0\4\31\6\0\7\31\2\0\4\31\1\262"+
    "\22\31\5\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[8064];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\1\1\3\11\1\1\1\11"+
    "\6\1\1\11\6\1\1\11\17\1\1\11\1\1\1\11"+
    "\1\1\2\11\1\0\1\11\1\0\4\11\1\0\2\1"+
    "\1\0\1\11\2\1\2\0\6\11\30\1\1\11\1\1"+
    "\1\11\2\1\1\11\2\1\1\0\113\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[178];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Cpp2Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 68: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 69: break;
          case 3:
            { return Cpp2Types.MODULO;
            }
          // fall through
          case 70: break;
          case 4:
            { return Cpp2Types.AND;
            }
          // fall through
          case 71: break;
          case 5:
            { return Cpp2Types.LEFT_PARENTHESIS;
            }
          // fall through
          case 72: break;
          case 6:
            { return Cpp2Types.RIGHT_PARENTHESIS;
            }
          // fall through
          case 73: break;
          case 7:
            { return Cpp2Types.DEREF;
            }
          // fall through
          case 74: break;
          case 8:
            { return Cpp2Types.PLUS;
            }
          // fall through
          case 75: break;
          case 9:
            { return Cpp2Types.COMMA;
            }
          // fall through
          case 76: break;
          case 10:
            { return Cpp2Types.MINUS;
            }
          // fall through
          case 77: break;
          case 11:
            { return Cpp2Types.DOT;
            }
          // fall through
          case 78: break;
          case 12:
            { return Cpp2Types.SLASH;
            }
          // fall through
          case 79: break;
          case 13:
            { return Cpp2Types.INT_LITERAL;
            }
          // fall through
          case 80: break;
          case 14:
            { return Cpp2Types.COLON;
            }
          // fall through
          case 81: break;
          case 15:
            { return Cpp2Types.SEMICOLON;
            }
          // fall through
          case 82: break;
          case 16:
            { return Cpp2Types.LT;
            }
          // fall through
          case 83: break;
          case 17:
            { return Cpp2Types.EQ;
            }
          // fall through
          case 84: break;
          case 18:
            { return Cpp2Types.GT;
            }
          // fall through
          case 85: break;
          case 19:
            { return Cpp2Types.IDENTIFIER_WORD;
            }
          // fall through
          case 86: break;
          case 20:
            { return Cpp2Types.EXP;
            }
          // fall through
          case 87: break;
          case 21:
            { return Cpp2Types.UNDERSCORE;
            }
          // fall through
          case 88: break;
          case 22:
            { return Cpp2Types.LEFT_BRACE;
            }
          // fall through
          case 89: break;
          case 23:
            { return Cpp2Types.OR;
            }
          // fall through
          case 90: break;
          case 24:
            { return Cpp2Types.RIGHT_BRACE;
            }
          // fall through
          case 91: break;
          case 25:
            { return Cpp2Types.MUL;
            }
          // fall through
          case 92: break;
          case 26:
            { return Cpp2Types.NEQ;
            }
          // fall through
          case 93: break;
          case 27:
            { return Cpp2Types.STRING_LITERAL;
            }
          // fall through
          case 94: break;
          case 28:
            { return Cpp2Types.ANDAND;
            }
          // fall through
          case 95: break;
          case 29:
            { return Cpp2Types.PLUSPLUS;
            }
          // fall through
          case 96: break;
          case 30:
            { return Cpp2Types.MINUSMINUS;
            }
          // fall through
          case 97: break;
          case 31:
            { return Cpp2Types.ARROW;
            }
          // fall through
          case 98: break;
          case 32:
            { return Cpp2Types.COMMENT;
            }
          // fall through
          case 99: break;
          case 33:
            { return Cpp2Types.FLOAT_LITERAL;
            }
          // fall through
          case 100: break;
          case 34:
            { return Cpp2Types.COLONCOLON;
            }
          // fall through
          case 101: break;
          case 35:
            { return Cpp2Types.LTLT;
            }
          // fall through
          case 102: break;
          case 36:
            { return Cpp2Types.LTEQ;
            }
          // fall through
          case 103: break;
          case 37:
            { return Cpp2Types.EQEQ;
            }
          // fall through
          case 104: break;
          case 38:
            { return Cpp2Types.GTEQ;
            }
          // fall through
          case 105: break;
          case 39:
            { return Cpp2Types.GTGT;
            }
          // fall through
          case 106: break;
          case 40:
            { return Cpp2Types.METAFUNCTION;
            }
          // fall through
          case 107: break;
          case 41:
            { return Cpp2Types.DO;
            }
          // fall through
          case 108: break;
          case 42:
            { return Cpp2Types.IF;
            }
          // fall through
          case 109: break;
          case 43:
            { return Cpp2Types.IN;
            }
          // fall through
          case 110: break;
          case 44:
            { return Cpp2Types.OROR;
            }
          // fall through
          case 111: break;
          case 45:
            { return Cpp2Types.DOTDOTDOT;
            }
          // fall through
          case 112: break;
          case 46:
            { return Cpp2Types.FOR;
            }
          // fall through
          case 113: break;
          case 47:
            { return Cpp2Types.OUT;
            }
          // fall through
          case 114: break;
          case 48:
            { return Cpp2Types.COPY;
            }
          // fall through
          case 115: break;
          case 49:
            { return Cpp2Types.ELSE;
            }
          // fall through
          case 116: break;
          case 50:
            { return Cpp2Types.MOVE;
            }
          // fall through
          case 117: break;
          case 51:
            { return Cpp2Types.NEXT;
            }
          // fall through
          case 118: break;
          case 52:
            { return Cpp2Types.THIS;
            }
          // fall through
          case 119: break;
          case 53:
            { return Cpp2Types.BOOL_LITERAL;
            }
          // fall through
          case 120: break;
          case 54:
            { return Cpp2Types.TYPE_WORD;
            }
          // fall through
          case 121: break;
          case 55:
            { return Cpp2Types.CONST;
            }
          // fall through
          case 122: break;
          case 56:
            { return Cpp2Types.FINAL;
            }
          // fall through
          case 123: break;
          case 57:
            { return Cpp2Types.INOUT;
            }
          // fall through
          case 124: break;
          case 58:
            { return Cpp2Types.USING;
            }
          // fall through
          case 125: break;
          case 59:
            { return Cpp2Types.WHILE;
            }
          // fall through
          case 126: break;
          case 60:
            { return Cpp2Types.PUBLIC;
            }
          // fall through
          case 127: break;
          case 61:
            { return Cpp2Types.RETURN;
            }
          // fall through
          case 128: break;
          case 62:
            { return Cpp2Types.FORWARD;
            }
          // fall through
          case 129: break;
          case 63:
            { return Cpp2Types.PRIVATE;
            }
          // fall through
          case 130: break;
          case 64:
            { return Cpp2Types.VIRTUAL;
            }
          // fall through
          case 131: break;
          case 65:
            { return Cpp2Types.OVERRIDE;
            }
          // fall through
          case 132: break;
          case 66:
            { return Cpp2Types.NAMESPACE;
            }
          // fall through
          case 133: break;
          case 67:
            { return Cpp2Types.PROTECTED;
            }
          // fall through
          case 134: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
