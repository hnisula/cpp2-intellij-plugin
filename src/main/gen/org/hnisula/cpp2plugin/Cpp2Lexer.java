// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Cpp2.flex

package org.hnisula.cpp2plugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.hnisula.cpp2plugin.psi.Cpp2Types;
import com.intellij.psi.TokenType;


class Cpp2Lexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\2\2\22\0\1\1\1\4"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\6\25\1\26\1\25\1\27\1\30\1\31\1\32\1\33"+
    "\1\0\1\34\1\35\1\36\3\35\1\37\5\40\1\41"+
    "\10\40\1\42\2\40\1\43\2\40\1\44\1\45\1\46"+
    "\1\47\1\50\1\0\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\40\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\40\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\1\77\1\40\1\100\1\101\1\102"+
    "\1\103\6\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\1\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\1\2\30\1\31\1\32\1\33\1\34\17\30"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\0\1\46\1\0\1\47\1\50\1\51\1\52"+
    "\1\53\1\22\1\54\1\55\2\0\1\56\1\57\1\60"+
    "\1\0\1\60\2\22\2\0\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\2\30\1\70\4\30\1\71\1\72"+
    "\16\30\1\73\1\46\1\74\1\0\5\22\1\0\1\60"+
    "\1\75\6\30\1\76\4\30\1\77\13\30\1\100\3\30"+
    "\1\101\1\102\3\30\1\103\1\30\1\104\5\30\1\105"+
    "\1\106\1\107\3\30\1\110\1\111\1\30\1\112\1\30"+
    "\1\113\6\30\1\114\1\30\1\115\6\30\1\116\1\117"+
    "\2\30\1\120\2\30\1\121\1\30\1\122\1\123\2\30"+
    "\1\124\2\30\1\125\1\126\1\30\1\127";

  private static int [] zzUnpackAction() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\210\0\210\0\210"+
    "\0\210\0\u0154\0\u0198\0\210\0\u01dc\0\u0220\0\u0264\0\210"+
    "\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc\0\210\0\u0440"+
    "\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594\0\210\0\210\0\210"+
    "\0\u0550\0\u05d8\0\u061c\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770"+
    "\0\u07b4\0\u07f8\0\u083c\0\u0880\0\u08c4\0\u0908\0\u094c\0\u0990"+
    "\0\210\0\u09d4\0\210\0\210\0\u0a18\0\210\0\210\0\210"+
    "\0\210\0\u0198\0\210\0\u0a5c\0\210\0\210\0\210\0\210"+
    "\0\210\0\u0374\0\210\0\210\0\u0aa0\0\u0ae4\0\u0b28\0\210"+
    "\0\u0b6c\0\u0bb0\0\210\0\u0bf4\0\u0c38\0\u0c7c\0\u0cc0\0\210"+
    "\0\210\0\u0d04\0\210\0\210\0\210\0\u0d48\0\u0d8c\0\u0dd0"+
    "\0\u0550\0\u0e14\0\u0e58\0\u0e9c\0\u0ee0\0\u0550\0\u0f24\0\u0f68"+
    "\0\u0fac\0\u0ff0\0\u1034\0\u1078\0\u10bc\0\u1100\0\u1144\0\u1188"+
    "\0\u11cc\0\u1210\0\u1254\0\u1298\0\u12dc\0\210\0\u0198\0\210"+
    "\0\u1320\0\u1364\0\u13a8\0\210\0\u13ec\0\u1430\0\u1474\0\u14b8"+
    "\0\210\0\u14fc\0\u1540\0\u1584\0\u15c8\0\u160c\0\u1650\0\u1694"+
    "\0\u16d8\0\u171c\0\u1760\0\u17a4\0\u0550\0\u17e8\0\u182c\0\u1870"+
    "\0\u18b4\0\u18f8\0\u193c\0\u1980\0\u19c4\0\u1a08\0\u1a4c\0\u1a90"+
    "\0\u0ae4\0\u1ad4\0\u1b18\0\u1b5c\0\u0550\0\u0550\0\u1ba0\0\u1be4"+
    "\0\u1c28\0\u0550\0\u1c6c\0\u0550\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c"+
    "\0\u1dc0\0\u0550\0\u0550\0\u0550\0\u1e04\0\u1e48\0\u1e8c\0\u0550"+
    "\0\u0550\0\u1ed0\0\u0550\0\u1f14\0\u0550\0\u1f58\0\u1f9c\0\u1fe0"+
    "\0\u2024\0\u2068\0\u20ac\0\u0550\0\u20f0\0\u0550\0\u2134\0\u2178"+
    "\0\u21bc\0\u2200\0\u2244\0\u2288\0\u0550\0\u0550\0\u22cc\0\u2310"+
    "\0\u2354\0\u2398\0\u23dc\0\u0550\0\u2420\0\u0550\0\u0550\0\u2464"+
    "\0\u24a8\0\u0550\0\u24ec\0\u2530\0\u0550\0\u0550\0\u2574\0\u0550";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\3\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\3\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\4\34\2\35\1\34\1\36\1\3\1\37"+
    "\1\40\1\41\1\34\1\42\1\43\1\44\1\45\1\46"+
    "\2\34\1\47\2\34\1\50\1\51\1\52\1\53\1\54"+
    "\1\34\1\55\1\56\1\57\1\60\2\34\1\61\1\62"+
    "\1\63\1\64\5\65\1\66\5\65\1\67\70\65\105\0"+
    "\2\4\133\0\1\70\62\0\1\71\72\0\12\72\1\73"+
    "\32\72\1\74\36\72\7\0\1\75\126\0\1\76\67\0"+
    "\1\77\13\0\1\100\71\0\1\101\2\0\1\102\3\25"+
    "\3\0\1\103\1\104\71\0\1\105\77\0\1\106\4\0"+
    "\1\107\7\0\1\110\63\0\1\25\6\0\1\111\1\0"+
    "\4\25\7\0\1\112\1\113\1\0\1\114\1\115\1\116"+
    "\6\0\1\112\2\0\1\117\1\113\4\0\1\114\3\0"+
    "\1\117\3\0\1\115\2\0\1\116\17\0\1\25\6\0"+
    "\1\111\1\0\4\25\10\0\1\113\1\0\1\114\1\115"+
    "\12\0\1\117\1\113\4\0\1\114\3\0\1\117\3\0"+
    "\1\115\37\0\1\120\105\0\1\121\1\122\103\0\1\123"+
    "\103\0\1\124\1\125\105\0\7\126\4\0\30\126\27\0"+
    "\4\34\6\0\7\34\4\0\30\34\11\0\1\6\4\0"+
    "\1\72\10\0\4\34\6\0\7\34\4\0\30\34\27\0"+
    "\4\34\6\0\7\34\4\0\20\34\1\127\7\34\27\0"+
    "\4\34\6\0\7\34\4\0\16\34\1\130\11\34\27\0"+
    "\4\34\6\0\7\34\4\0\16\34\1\131\11\34\27\0"+
    "\4\34\6\0\7\34\4\0\13\34\1\132\14\34\27\0"+
    "\4\34\6\0\7\34\4\0\1\34\1\133\7\34\1\134"+
    "\4\34\1\135\11\34\27\0\4\34\6\0\7\34\4\0"+
    "\6\34\1\136\6\34\1\137\12\34\27\0\4\34\6\0"+
    "\7\34\4\0\16\34\1\140\11\34\27\0\4\34\6\0"+
    "\7\34\4\0\1\34\1\141\3\34\1\142\22\34\27\0"+
    "\4\34\6\0\7\34\4\0\23\34\1\143\1\144\3\34"+
    "\27\0\4\34\6\0\7\34\4\0\20\34\1\145\2\34"+
    "\1\146\4\34\27\0\4\34\6\0\7\34\4\0\5\34"+
    "\1\147\22\34\27\0\4\34\6\0\7\34\4\0\10\34"+
    "\1\150\7\34\1\151\6\34\1\152\11\0\1\6\4\0"+
    "\1\72\10\0\3\34\1\35\6\0\7\34\4\0\21\34"+
    "\1\153\6\34\27\0\4\34\6\0\7\34\4\0\11\34"+
    "\1\154\16\34\27\0\4\34\6\0\7\34\4\0\10\34"+
    "\1\155\17\34\105\0\1\156\2\0\5\65\1\0\5\65"+
    "\1\0\70\65\12\72\1\157\32\72\1\74\36\72\21\0"+
    "\1\160\62\0\2\106\2\0\11\106\1\161\66\106\2\107"+
    "\2\0\100\107\12\0\1\111\10\0\4\111\10\0\1\113"+
    "\1\0\1\113\13\0\1\117\1\113\4\0\1\113\3\0"+
    "\1\117\26\0\1\162\10\0\2\162\120\0\1\163\1\164"+
    "\20\0\1\163\7\0\1\164\51\0\1\165\21\0\1\165"+
    "\32\0\1\166\10\0\4\166\6\0\3\166\11\0\6\166"+
    "\45\0\1\167\2\0\4\170\110\0\1\171\73\0\4\126"+
    "\6\0\7\126\4\0\30\126\27\0\4\34\6\0\7\34"+
    "\4\0\5\34\1\172\22\34\27\0\4\34\6\0\7\34"+
    "\4\0\15\34\1\173\1\34\1\174\10\34\27\0\4\34"+
    "\6\0\7\34\4\0\21\34\1\175\6\34\27\0\4\34"+
    "\6\0\7\34\4\0\13\34\1\176\14\34\27\0\4\34"+
    "\6\0\7\34\4\0\15\34\1\177\12\34\27\0\4\34"+
    "\6\0\7\34\4\0\20\34\1\200\7\34\27\0\4\34"+
    "\6\0\7\34\4\0\16\34\1\201\11\34\27\0\4\34"+
    "\6\0\7\34\4\0\24\34\1\202\3\34\27\0\4\34"+
    "\6\0\7\34\4\0\14\34\1\203\13\34\27\0\4\34"+
    "\6\0\7\34\4\0\26\34\1\204\1\34\27\0\4\34"+
    "\6\0\7\34\4\0\22\34\1\205\5\34\27\0\4\34"+
    "\6\0\7\34\4\0\5\34\1\206\22\34\27\0\4\34"+
    "\6\0\7\34\4\0\11\34\1\207\4\34\1\210\11\34"+
    "\27\0\4\34\6\0\7\34\4\0\2\34\1\211\25\34"+
    "\27\0\4\34\6\0\7\34\4\0\22\34\1\212\5\34"+
    "\27\0\4\34\6\0\7\34\4\0\11\34\1\213\16\34"+
    "\27\0\4\34\6\0\7\34\4\0\23\34\1\214\4\34"+
    "\27\0\4\34\6\0\7\34\4\0\17\34\1\215\10\34"+
    "\27\0\4\34\6\0\7\34\4\0\11\34\1\216\16\34"+
    "\27\0\4\34\6\0\7\34\4\0\20\34\1\217\7\34"+
    "\27\0\4\34\6\0\7\34\4\0\11\34\1\220\16\34"+
    "\4\0\2\106\2\0\11\106\1\161\4\106\1\221\61\106"+
    "\12\0\1\162\10\0\2\162\14\0\1\114\1\115\20\0"+
    "\1\114\7\0\1\115\52\0\1\164\30\0\1\164\51\0"+
    "\1\164\21\0\1\164\32\0\1\166\10\0\4\166\6\0"+
    "\3\166\1\0\1\114\1\115\6\0\6\166\4\0\1\114"+
    "\7\0\1\115\33\0\4\170\100\0\4\170\10\0\1\113"+
    "\1\0\1\113\14\0\1\113\4\0\1\113\43\0\4\34"+
    "\6\0\7\34\4\0\1\34\1\222\26\34\27\0\4\34"+
    "\6\0\7\34\4\0\21\34\1\223\1\224\5\34\27\0"+
    "\4\34\6\0\7\34\4\0\27\34\1\225\27\0\4\34"+
    "\6\0\7\34\4\0\5\34\1\226\22\34\27\0\4\34"+
    "\6\0\7\34\4\0\21\34\1\214\6\34\27\0\4\34"+
    "\6\0\7\34\4\0\1\34\1\227\26\34\27\0\4\34"+
    "\6\0\7\34\4\0\25\34\1\230\2\34\27\0\4\34"+
    "\6\0\7\34\4\0\23\34\1\231\4\34\27\0\4\34"+
    "\6\0\7\34\4\0\5\34\1\232\22\34\27\0\4\34"+
    "\6\0\7\34\4\0\5\34\1\233\22\34\27\0\4\34"+
    "\6\0\7\34\4\0\22\34\1\234\5\34\27\0\4\34"+
    "\6\0\7\34\4\0\20\34\1\235\7\34\27\0\4\34"+
    "\6\0\7\34\4\0\24\34\1\236\3\34\27\0\4\34"+
    "\6\0\7\34\4\0\22\34\1\237\5\34\27\0\4\34"+
    "\6\0\7\34\4\0\13\34\1\240\14\34\27\0\4\34"+
    "\6\0\7\34\4\0\23\34\1\241\4\34\27\0\4\34"+
    "\6\0\7\34\4\0\21\34\1\242\6\34\27\0\4\34"+
    "\6\0\7\34\4\0\5\34\1\243\22\34\27\0\4\34"+
    "\6\0\7\34\4\0\5\34\1\244\22\34\27\0\4\34"+
    "\6\0\7\34\4\0\15\34\1\245\12\34\27\0\4\34"+
    "\6\0\7\34\4\0\22\34\1\246\5\34\27\0\4\34"+
    "\6\0\7\34\4\0\13\34\1\247\14\34\27\0\4\34"+
    "\6\0\7\34\4\0\12\34\1\250\15\34\27\0\4\34"+
    "\6\0\7\34\4\0\22\34\1\251\5\34\27\0\4\34"+
    "\6\0\7\34\4\0\11\34\1\252\16\34\27\0\4\34"+
    "\6\0\7\34\4\0\13\34\1\253\14\34\27\0\4\34"+
    "\6\0\7\34\4\0\1\34\1\254\26\34\27\0\4\34"+
    "\6\0\7\34\4\0\22\34\1\255\5\34\27\0\4\34"+
    "\6\0\7\34\4\0\21\34\1\256\6\34\27\0\4\34"+
    "\6\0\7\34\4\0\20\34\1\257\7\34\27\0\4\34"+
    "\6\0\7\34\4\0\1\34\1\260\26\34\27\0\4\34"+
    "\6\0\7\34\4\0\5\34\1\261\22\34\27\0\4\34"+
    "\6\0\7\34\4\0\11\34\1\262\16\34\27\0\4\34"+
    "\6\0\7\34\4\0\20\34\1\263\7\34\27\0\4\34"+
    "\6\0\7\34\4\0\7\34\1\264\20\34\27\0\4\34"+
    "\6\0\7\34\4\0\23\34\1\265\4\34\27\0\4\34"+
    "\6\0\7\34\4\0\5\34\1\266\22\34\27\0\4\34"+
    "\6\0\7\34\4\0\15\34\1\267\12\34\27\0\4\34"+
    "\6\0\7\34\4\0\20\34\1\270\7\34\27\0\4\34"+
    "\6\0\7\34\4\0\17\34\1\271\10\34\27\0\4\34"+
    "\6\0\7\34\4\0\11\34\1\272\16\34\27\0\4\34"+
    "\6\0\7\34\4\0\22\34\1\273\5\34\27\0\4\34"+
    "\6\0\7\34\4\0\3\34\1\274\24\34\27\0\4\34"+
    "\6\0\7\34\4\0\3\34\1\275\24\34\27\0\4\34"+
    "\6\0\7\34\4\0\15\34\1\276\12\34\27\0\4\34"+
    "\6\0\7\34\4\0\1\34\1\277\26\34\27\0\4\34"+
    "\6\0\7\34\4\0\23\34\1\300\4\34\27\0\4\34"+
    "\6\0\7\34\4\0\4\34\1\301\23\34\27\0\4\34"+
    "\6\0\7\34\4\0\1\34\1\302\26\34\27\0\4\34"+
    "\6\0\7\34\4\0\4\34\1\303\23\34\27\0\4\34"+
    "\6\0\7\34\4\0\5\34\1\304\22\34\27\0\4\34"+
    "\6\0\7\34\4\0\22\34\1\305\5\34\27\0\4\34"+
    "\6\0\7\34\4\0\13\34\1\306\14\34\27\0\4\34"+
    "\6\0\7\34\4\0\5\34\1\307\22\34\27\0\4\34"+
    "\6\0\7\34\4\0\1\310\27\34\27\0\4\34\6\0"+
    "\7\34\4\0\3\34\1\311\24\34\27\0\4\34\6\0"+
    "\7\34\4\0\5\34\1\312\22\34\27\0\4\34\6\0"+
    "\7\34\4\0\5\34\1\313\22\34\27\0\4\34\6\0"+
    "\7\34\4\0\20\34\1\314\7\34\27\0\4\34\6\0"+
    "\7\34\4\0\5\34\1\315\22\34\27\0\4\34\6\0"+
    "\7\34\4\0\4\34\1\316\23\34\27\0\4\34\6\0"+
    "\7\34\4\0\5\34\1\317\22\34\27\0\4\34\6\0"+
    "\7\34\4\0\6\34\1\320\21\34\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[9656];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\2\1\4\11\2\1\1\11\3\1\1\11"+
    "\6\1\1\11\6\1\3\11\20\1\1\11\1\1\2\11"+
    "\1\1\4\11\1\0\1\11\1\0\5\11\1\1\2\11"+
    "\2\0\1\1\1\11\1\1\1\0\1\11\2\1\2\0"+
    "\2\11\1\1\3\11\30\1\1\11\1\1\1\11\1\0"+
    "\2\1\1\11\2\1\1\0\1\1\1\11\127\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Cpp2Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 88: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 89: break;
          case 3:
            { return Cpp2Types.EXCLAMATION;
            }
          // fall through
          case 90: break;
          case 4:
            { yybegin(IN_STRING); return Cpp2Types.STRING_START;
            }
          // fall through
          case 91: break;
          case 5:
            { return Cpp2Types.HASHTAG;
            }
          // fall through
          case 92: break;
          case 6:
            { return Cpp2Types.DOLLAR;
            }
          // fall through
          case 93: break;
          case 7:
            { return Cpp2Types.MODULO;
            }
          // fall through
          case 94: break;
          case 8:
            { return Cpp2Types.AND;
            }
          // fall through
          case 95: break;
          case 9:
            { return Cpp2Types.LEFT_PARENTHESIS;
            }
          // fall through
          case 96: break;
          case 10:
            { return Cpp2Types.RIGHT_PARENTHESIS;
            }
          // fall through
          case 97: break;
          case 11:
            { return Cpp2Types.ASTERISK;
            }
          // fall through
          case 98: break;
          case 12:
            { return Cpp2Types.PLUS;
            }
          // fall through
          case 99: break;
          case 13:
            { return Cpp2Types.COMMA;
            }
          // fall through
          case 100: break;
          case 14:
            { return Cpp2Types.MINUS;
            }
          // fall through
          case 101: break;
          case 15:
            { return Cpp2Types.DOT;
            }
          // fall through
          case 102: break;
          case 16:
            { return Cpp2Types.SLASH;
            }
          // fall through
          case 103: break;
          case 17:
            { return Cpp2Types.ZERO;
            }
          // fall through
          case 104: break;
          case 18:
            { return Cpp2Types.INT_LITERAL;
            }
          // fall through
          case 105: break;
          case 19:
            { return Cpp2Types.COLON;
            }
          // fall through
          case 106: break;
          case 20:
            { return Cpp2Types.SEMICOLON;
            }
          // fall through
          case 107: break;
          case 21:
            { return Cpp2Types.LT;
            }
          // fall through
          case 108: break;
          case 22:
            { return Cpp2Types.EQ;
            }
          // fall through
          case 109: break;
          case 23:
            { return Cpp2Types.GT;
            }
          // fall through
          case 110: break;
          case 24:
            { return Cpp2Types.IDENTIFIER_WORD;
            }
          // fall through
          case 111: break;
          case 25:
            { return Cpp2Types.LEFT_BRACKET;
            }
          // fall through
          case 112: break;
          case 26:
            { return Cpp2Types.RIGHT_BRACKET;
            }
          // fall through
          case 113: break;
          case 27:
            { return Cpp2Types.EXP;
            }
          // fall through
          case 114: break;
          case 28:
            { return Cpp2Types.WILDCARD;
            }
          // fall through
          case 115: break;
          case 29:
            { return Cpp2Types.LEFT_BRACE;
            }
          // fall through
          case 116: break;
          case 30:
            { return Cpp2Types.OR;
            }
          // fall through
          case 117: break;
          case 31:
            { return Cpp2Types.RIGHT_BRACE;
            }
          // fall through
          case 118: break;
          case 32:
            { return Cpp2Types.TILDE;
            }
          // fall through
          case 119: break;
          case 33:
            { return Cpp2Types.STRING_SEGMENT;
            }
          // fall through
          case 120: break;
          case 34:
            { yybegin(YYINITIAL); return Cpp2Types.STRING_END;
            }
          // fall through
          case 121: break;
          case 35:
            { yybegin(YYINITIAL); return Cpp2Types.INTERPOLATION_START;
            }
          // fall through
          case 122: break;
          case 36:
            { return Cpp2Types.NEQ;
            }
          // fall through
          case 123: break;
          case 37:
            { return Cpp2Types.ANDAND;
            }
          // fall through
          case 124: break;
          case 38:
            { return Cpp2Types.CHAR_LITERAL;
            }
          // fall through
          case 125: break;
          case 39:
            { yybegin(IN_STRING); return Cpp2Types.INTERPOLATION_END;
            }
          // fall through
          case 126: break;
          case 40:
            { return Cpp2Types.ASTERISKEQ;
            }
          // fall through
          case 127: break;
          case 41:
            { return Cpp2Types.PLUSPLUS;
            }
          // fall through
          case 128: break;
          case 42:
            { return Cpp2Types.PLUSEQ;
            }
          // fall through
          case 129: break;
          case 43:
            { return Cpp2Types.MINUSMINUS;
            }
          // fall through
          case 130: break;
          case 44:
            { return Cpp2Types.MINUSEQ;
            }
          // fall through
          case 131: break;
          case 45:
            { return Cpp2Types.ARROW;
            }
          // fall through
          case 132: break;
          case 46:
            { return Cpp2Types.LINE_COMMENT;
            }
          // fall through
          case 133: break;
          case 47:
            { return Cpp2Types.SLASHEQ;
            }
          // fall through
          case 134: break;
          case 48:
            { return Cpp2Types.FLOAT_LITERAL;
            }
          // fall through
          case 135: break;
          case 49:
            { return Cpp2Types.COLONCOLON;
            }
          // fall through
          case 136: break;
          case 50:
            { return Cpp2Types.LTLT;
            }
          // fall through
          case 137: break;
          case 51:
            { return Cpp2Types.LTEQ;
            }
          // fall through
          case 138: break;
          case 52:
            { return Cpp2Types.EQEQ;
            }
          // fall through
          case 139: break;
          case 53:
            { return Cpp2Types.GTEQ;
            }
          // fall through
          case 140: break;
          case 54:
            { return Cpp2Types.GTGT;
            }
          // fall through
          case 141: break;
          case 55:
            { return Cpp2Types.METAFUNCTION;
            }
          // fall through
          case 142: break;
          case 56:
            { return Cpp2Types.DO;
            }
          // fall through
          case 143: break;
          case 57:
            { return Cpp2Types.IF;
            }
          // fall through
          case 144: break;
          case 58:
            { return Cpp2Types.IN;
            }
          // fall through
          case 145: break;
          case 59:
            { return Cpp2Types.OROR;
            }
          // fall through
          case 146: break;
          case 60:
            { return Cpp2Types.DOTDOTDOT;
            }
          // fall through
          case 147: break;
          case 61:
            { return Cpp2Types.SPACESHIP;
            }
          // fall through
          case 148: break;
          case 62:
            { return Cpp2Types.FOR;
            }
          // fall through
          case 149: break;
          case 63:
            { return Cpp2Types.OUT;
            }
          // fall through
          case 150: break;
          case 64:
            { return Cpp2Types.BLOCK_COMMENT;
            }
          // fall through
          case 151: break;
          case 65:
            { return Cpp2Types.COPY;
            }
          // fall through
          case 152: break;
          case 66:
            { return Cpp2Types.ELSE;
            }
          // fall through
          case 153: break;
          case 67:
            { return Cpp2Types.MOVE;
            }
          // fall through
          case 154: break;
          case 68:
            { return Cpp2Types.NEXT;
            }
          // fall through
          case 155: break;
          case 69:
            { return Cpp2Types.THIS;
            }
          // fall through
          case 156: break;
          case 70:
            { return Cpp2Types.BOOL_LITERAL;
            }
          // fall through
          case 157: break;
          case 71:
            { return Cpp2Types.TYPE_WORD;
            }
          // fall through
          case 158: break;
          case 72:
            { return Cpp2Types.BREAK;
            }
          // fall through
          case 159: break;
          case 73:
            { return Cpp2Types.CONST;
            }
          // fall through
          case 160: break;
          case 74:
            { return Cpp2Types.FINAL;
            }
          // fall through
          case 161: break;
          case 75:
            { return Cpp2Types.INOUT;
            }
          // fall through
          case 162: break;
          case 76:
            { return Cpp2Types.USING;
            }
          // fall through
          case 163: break;
          case 77:
            { return Cpp2Types.WHILE;
            }
          // fall through
          case 164: break;
          case 78:
            { return Cpp2Types.PUBLIC;
            }
          // fall through
          case 165: break;
          case 79:
            { return Cpp2Types.RETURN;
            }
          // fall through
          case 166: break;
          case 80:
            { return Cpp2Types.FORWARD;
            }
          // fall through
          case 167: break;
          case 81:
            { return Cpp2Types.PRIVATE;
            }
          // fall through
          case 168: break;
          case 82:
            { return Cpp2Types.VIRTUAL;
            }
          // fall through
          case 169: break;
          case 83:
            { return Cpp2Types.CONTINUE;
            }
          // fall through
          case 170: break;
          case 84:
            { return Cpp2Types.OVERRIDE;
            }
          // fall through
          case 171: break;
          case 85:
            { return Cpp2Types.NAMESPACE;
            }
          // fall through
          case 172: break;
          case 86:
            { return Cpp2Types.PROTECTED;
            }
          // fall through
          case 173: break;
          case 87:
            { return Cpp2Types.FORWARD_REF;
            }
          // fall through
          case 174: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
